use rand::Rng;
use std::fs::read_to_string;
use std::io;
use std::io::Write;

fn do_user_input(mut passing_variable: String, message: &str) -> String {
    //get an input from the user
    println!("{}", message);

    //this line clears the standard output stream, fixing a bug with the print! macro. I found this code at https://stackoverflow.com/questions/77197962
    io::stdout().flush().unwrap();
    //get an input from the user and trim their input
    let _ = io::stdin().read_line(&mut passing_variable);
    passing_variable = passing_variable.trim().to_string().to_lowercase();
    println!();
    return passing_variable;
}

//this code was generated by ChatGPT to clear the terminal screen on all operating systems
fn clear_screen() {
    #[cfg(target_os = "windows")]
    let _ = std::process::Command::new("cmd")
        .arg("/c")
        .arg("cls")
        .status();

    #[cfg(not(target_os = "windows"))]
    let _ = Command::new("clear").status();
}

//this code was orinally generated by ChatGPT to read a text file, iterate through, splitting entries on the ", " delimeter and adding each item to a vector
//I have re-wrote this function twice on my own.
fn txt_to_vector(file_location: &String) -> Vec<String> {
    let mut temp_vector: Vec<String> = Vec::new();
    //saves data from a text file as data
    let data = read_to_string(file_location).expect("There was a problem opening the file");

    // iterates through data, splits on ", ", pushes to a vector, and returns that vector
    for line in data.lines() {
        // let line = line.expect("Failed to read line");
        let entries: Vec<&str> = line.split(", ").collect();
        for entry in entries {
            temp_vector.push(entry.to_string());
        }
    }
    return temp_vector;
}

fn main() {
    let mut meta_game: bool = true;
    let mut wrong_guesses_to_lose = 6;
    while meta_game {
        // all bold ascii text was generated via this website: https://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20
        let you_win = r#"██╗   ██╗     ██████╗     ██╗   ██╗            ██╗    ██╗    ██╗    ███╗   ██╗    ██╗    ██╗    ██╗    
╚██╗ ██╔╝    ██╔═══██╗    ██║   ██║            ██║    ██║    ██║    ████╗  ██║    ██║    ██║    ██║    
 ╚████╔╝     ██║   ██║    ██║   ██║            ██║ █╗ ██║    ██║    ██╔██╗ ██║    ██║    ██║    ██║    
  ╚██╔╝      ██║   ██║    ██║   ██║            ██║███╗██║    ██║    ██║╚██╗██║    ╚═╝    ╚═╝    ╚═╝    
   ██║       ╚██████╔╝    ╚██████╔╝            ╚███╔███╔╝    ██║    ██║ ╚████║    ██╗    ██╗    ██╗    
   ╚═╝        ╚═════╝      ╚═════╝              ╚══╝╚══╝     ╚═╝    ╚═╝  ╚═══╝    ╚═╝    ╚═╝    ╚═╝"#;
        let welcome = r#"


        ███████╗██████╗ ██╗  ██╗██████╗  █████╗ ██╗███╗   ███╗███████╗    
        ██╔════╝██╔══██╗██║  ██║██╔══██╗██╔══██╗██║████╗ ████║██╔════╝    
        █████╗  ██████╔╝███████║██████╔╝███████║██║██╔████╔██║███████╗    
        ██╔══╝  ██╔═══╝ ██╔══██║██╔══██╗██╔══██║██║██║╚██╔╝██║╚════██║    
        ███████╗██║     ██║  ██║██║  ██║██║  ██║██║██║ ╚═╝ ██║███████║    
        ╚══════╝╚═╝     ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝╚═╝     ╚═╝╚══════╝    
                                                                          
    ██╗  ██╗ █████╗ ███╗   ██╗ ██████╗ ███╗   ███╗ █████╗ ███╗   ██╗██╗██╗
    ██║  ██║██╔══██╗████╗  ██║██╔════╝ ████╗ ████║██╔══██╗████╗  ██║██║██║
    ███████║███████║██╔██╗ ██║██║  ███╗██╔████╔██║███████║██╔██╗ ██║██║██║
    ██╔══██║██╔══██║██║╚██╗██║██║   ██║██║╚██╔╝██║██╔══██║██║╚██╗██║╚═╝╚═╝
    ██║  ██║██║  ██║██║ ╚████║╚██████╔╝██║ ╚═╝ ██║██║  ██║██║ ╚████║██╗██╗
    ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝╚═╝"#;

        let you_lose = r#"


██╗   ██╗ ██████╗ ██╗   ██╗    ██╗      ██████╗ ███████╗███████╗██╗██╗██╗
╚██╗ ██╔╝██╔═══██╗██║   ██║    ██║     ██╔═══██╗██╔════╝██╔════╝██║██║██║
 ╚████╔╝ ██║   ██║██║   ██║    ██║     ██║   ██║███████╗█████╗  ██║██║██║
  ╚██╔╝  ██║   ██║██║   ██║    ██║     ██║   ██║╚════██║██╔══╝  ╚═╝╚═╝╚═╝
   ██║   ╚██████╔╝╚██████╔╝    ███████╗╚██████╔╝███████║███████╗██╗██╗██╗
   ╚═╝    ╚═════╝  ╚═════╝     ╚══════╝ ╚═════╝ ╚══════╝╚══════╝╚═╝╚═╝╚═╝"#;

        // all of the hangman/gallows art was generated by ChatGPT 3.5 and modified by me to have 2 hanged men
        let gallows = r#"
	  +---+
	  |   |
	      |
	      |
	      |
	      |
	========="#;

        let head = r#"
	  +---+
	  |   |
	  O   |
	      |
	      |
	      |
	========="#;

        let body = r#"
	  +---+
	  |   |
	  O   |
	  |   |
	      |
	      |
	========="#;

        let left_arm = r#"
	  +---+
	  |   |
	  O   |
	 /|   |
	      |
	      |
	========="#;

        let right_arm = r#"
	  +---+
	  |   |
	  O   |
	 /|\  |
	      |
	      |
	========="#;

        let left_leg = r#"
	  +---+
	  |   |
	  O   |
	 /|\  |
	 /    |
	      |
	========="#;

        let right_leg = r#"
	  +---+
	  |   |
	  O   |
	 /|\  |
	 / \  |
	      |
	========="#;
        let head2 = r#"
      +---+---+
      |   |   |
      O   |   O
     /|\  |
     / \  |
          |
    ============="#;
        let body2 = r#"
      +---+---+
      |   |   |
      O   |   O
     /|\  |   |
     / \  |
          |
    ============="#;

        let left_arm2 = r#"
      +---+---+
      |   |   |
      O   |   O
     /|\  |  /|
     / \  |
          |
    ============="#;
        let right_arm2 = r#"
      +---+---+
      |   |   |
      O   |   O
     /|\  |  /|\
     / \  |
          |
    ============="#;
        let left_leg2 = r#"
      +---+---+
      |   |   |
      O   |   O
     /|\  |  /|\
     / \  |  /
          |
    ============="#;
        let right_leg2 = r#"
     +---+---+
     |   |   |
     O   |   O
    /|\  |  /|\
    / \  |  / \
         |
   ============="#;

        //define variables
        // define variable to play again

        //define victory/loss bool
        let mut win: bool = false;
        // define variable to hold a guess made after typing solve
        let mut solve_guess = String::new();
        //define an array to hold my ascii art of gallows and various stages of hanged man
        let pictures: [&str; 13] = [
            gallows, head, body, left_arm, right_arm, left_leg, right_leg, head2, body2, left_arm2,
            right_arm2, left_leg2, right_leg2,
        ];
        //define a variable to hold normal guesses
        let mut guess = String::new();
        //create a vector and give it the value of the temp_vector from the function txt_to_vector
        //credits to alpha-tango on github, as they provided the word bank for hangman. I got the data from this link: https://gist.github.com/alpha-tango/c3d2645817cf4af2aa45#file-hangman_wordbank

        let file_name = "src\\word_bank.txt".to_string();
        let mut answer_word_bank: Vec<String> = txt_to_vector(&file_name);

        //porcupine was the test word, I wanted to add it to the list

        // let mut answer_word_bank = Vec::<String>::new();
        answer_word_bank.push("porcupine".to_string());

        //define a random object and generate a random number to use as an index to assign the hidden word

        let mut rng = rand::thread_rng();
        let answer_index = rng.gen_range(0..answer_word_bank.len());

        //define the hidden word, the answer
        let answer = &answer_word_bank[answer_index];

        // define a vector to hold correct guesses
        let mut correct_guesses: Vec<String> = vec![];
        // define a vector to hold wrong guesses
        let mut incorrect_guesses: Vec<String> = vec![];
        // define a vector to hold all guesses
        let mut all_guesses: Vec<String> = vec![];
        //define a bool make the game loop continue
        let mut keep_going: bool = true;

        let mut do_get_guess = true;

        //clear the screen
        clear_screen();
        //display main menu text
        println!("{}", welcome);

        while keep_going {
            //have the user press enter to start the program/every loop to preserve what was just printed onto the screen
            if do_get_guess {
                println!("Press enter to continue ");
                {
                    let mut _temporary_holder = Default::default();
                    io::stdin().read_line(&mut _temporary_holder).unwrap();
                }
            }

            //clear the screen
            clear_screen();

            //make it look cool
            println!("{}", pictures[incorrect_guesses.len()]);

            //Inform the user of the game
            println!("Guess the word hidden by the blanks");
            println!("If you think you know the word, type 'solve'");

            //display what characters of the word that the user has guessed
            for letter in answer.chars() {
                if correct_guesses.contains(&letter.to_string()) {
                    print!("{} ", letter);
                } else {
                    print!("_ ");
                };
            }

            println!("\n");

            //display list of already guessed letters
            if incorrect_guesses.len() > 0 {
                println!("Your incorrect guesses are: ");
                for incorrect_guess in &incorrect_guesses {
                    if incorrect_guesses[incorrect_guesses.len() - 1] == incorrect_guess.to_string()
                    {
                        println!("{} \n", incorrect_guess);
                    } else {
                        print!("{}, ", incorrect_guess);
                    }
                }
            } else {
                println!("You have no incorrect guesses so far")
            }
            if do_get_guess {
                println!("Guess a character!");
                guess = do_user_input(guess.clone(), "Please input your guess: ");

                //verify that this guess has not been made
                if all_guesses.contains(&guess) {
                    println!(
                        "You have already guessed '{}'. Make a different guess.",
                        &guess
                    );
                    guess = String::new();
                    continue;
                }
                if guess == "debugging lose"
                    || guess == "debugging clear"
                    || guess == "solve"
                    || guess == "debugging win"
                {
                    //debugging functionality
                    if guess == "debugging lose" {
                        break;
                    }
                    //debugging functionality
                    if guess == "debugging win" {
                        win = true;
                        break;
                    }
                    //debugging functionality
                    if guess == "debugging clear" {
                        incorrect_guesses.clear();
                        correct_guesses.clear();
                        guess.clear();
                        continue;
                    }

                    //functionality to guess the word early
                    if guess == "solve" {
                        solve_guess = do_user_input(
                            solve_guess.clone(),
                            "Enter your guess as to what the entire word is: ",
                        );

                        if solve_guess == *answer {
                            win = true;
                            break;
                        }
                        //copy solve_guess to guess so that it can be added to the list of wrong guesses
                        guess = solve_guess.clone();
                    }
                } else if guess.len() != 1 || guess == "\n" {
                    println!(
                        "{} is not a valid guess. Valid guesses are 1 character long OR 'solve'",
                        &guess
                    );
                    guess = String::new();
                    continue;
                }
            }

            //check if guess is part of answer

            if answer.contains(&guess) && guess != "".to_string() {
                //if true, display message and add value of guess to vector of correct guesses
                println!("Your guess was correct!");
                correct_guesses.push(guess.clone());

                //check to see if player has guessed all of the necessary letters and wins
                {
                    let mut solved_word = String::new();
                    for letter in answer.chars() {
                        if correct_guesses.contains(&letter.to_string()) {
                            solved_word = solved_word + &letter.to_string();
                        }
                    }
                    if solved_word == *answer {
                        win = true;
                        keep_going = false;
                    }
                }
            } else {
                //if not true, display message and add to vector of incorrect guesses
                if guess != "".to_string() {
                    println!("Your guess was incorrect!");
                    incorrect_guesses.push(guess.clone());
                    //check to see if the first man is fully hanged. ask if the player wants to hang a second man, if not, the player loses
                    do_get_guess = true;
                    if incorrect_guesses.len() >= wrong_guesses_to_lose {
                        // if it is the first time that the player would lose

                        if wrong_guesses_to_lose >= incorrect_guesses.len() {
                            //make it look pretty
                            if wrong_guesses_to_lose == 6 {
                                wrong_guesses_to_lose = 12;
                                do_get_guess = false;

                                //
                                guess = String::new();
                                all_guesses.clear();
                                //add all items from vector of correct and incorrect guesses to vector of all guesses
                                all_guesses = correct_guesses
                                    .iter()
                                    .cloned()
                                    .chain(incorrect_guesses.iter().cloned())
                                    .collect();
                                //

                                continue;
                            }

                            let mut questionable_input_quality: bool = true;
                            while questionable_input_quality {
                                let mut change_difficulty = String::new();

                                change_difficulty = do_user_input(
                                change_difficulty.clone(),
                                "\nDo you want to continue playing this game with a second hangman?(y/n): ",
                                );

                                if change_difficulty == "n".to_string() {
                                    questionable_input_quality = false;
                                } else if change_difficulty == "y".to_string() {
                                    questionable_input_quality = false;
                                    wrong_guesses_to_lose = 12;
                                } else {
                                    println!(
                                    "\nThat is not a valid input. Valid inputs are 'y' or 'n'.\n"
                                );
                                    continue;
                                }
                            }
                        }
                        if incorrect_guesses.len() >= wrong_guesses_to_lose {
                            win = false;
                            keep_going = false;
                        }
                    }
                } else {
                    do_get_guess = true;
                }

                //clear value of guess and vector of all guesses
                guess = String::new();
                all_guesses.clear();
                //add all items from vector of correct and incorrect guesses to vector of all guesses
                all_guesses = correct_guesses
                    .iter()
                    .cloned()
                    .chain(incorrect_guesses.iter().cloned())
                    .collect();
            }
        }
        if win {
            //clear the screen
            clear_screen();
            //display victory text
            println!("{}", you_win);
            //their hanged man
            println!("{}\n", pictures[incorrect_guesses.len()]);
            println!("The word was {}\n", &answer);

            //display wrong user guesses
            if incorrect_guesses.len() > 0 {
                println!("Your incorrect guesses were: ");
                for incorrect_guess in &incorrect_guesses {
                    if incorrect_guesses[incorrect_guesses.len() - 1] == incorrect_guess.to_string()
                    {
                        println!("{} \n", incorrect_guess);
                    } else {
                        print!("{}, ", incorrect_guess);
                    }
                }
            } else {
                println!("Wow! You had no incorrect guesses!\n")
            }

            //have the user press enter to exit
            println!("Press enter to exit");
            {
                let mut _temporary_holder = Default::default();
                io::stdin().read_line(&mut _temporary_holder).unwrap();
            }
        } else {
            //clear the screen
            clear_screen();
            //display loss text
            println!("{}", you_lose);
            println!("{}\n", pictures[pictures.len() - 1]);
            //display what the word was
            println!("The word was {}\n", answer);
            //have the user press enter to exit
            println!("Press enter to exit\n");
            {
                let mut _temporary_holder = Default::default();
                io::stdin().read_line(&mut _temporary_holder).unwrap();
            }
        }

        let mut bad_input: bool = true;
        while bad_input {
            // would you like to play again? - get user input
            let mut play_again_answer = String::new();

            play_again_answer = do_user_input(
                play_again_answer.clone(),
                "\n\nWould you like to play again?(y/n): ",
            );

            if play_again_answer == "n".to_string() {
                meta_game = false;
                bad_input = false;
            } else if play_again_answer == "y".to_string() {
                meta_game = true;
                bad_input = false;
            } else {
                println!("\nThat is not a valid input. Valid inputs are 'y' or 'n'.\n");
                continue;
            }
        }
    }
}
